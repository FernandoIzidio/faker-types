from .. import Provider as PersonProvider
from _typeshed import Incomplete
from datetime import datetime
from typing import Optional, Sequence, Tuple, Union

def checksum_identity_card_number(characters: Sequence[Union[str, int]]) -> int: ...

class Provider(PersonProvider):
    formats: Incomplete
    first_names_male: Tuple[str, ...]
    first_names_female: Tuple[str, ...]
    unisex_last_names: Tuple[str, ...]
    male_last_names: Tuple[str, ...]
    prefixes_male: Tuple[str, ...]
    prefixes_female: Tuple[str, ...]
    first_names: Incomplete
    def last_name(self) -> str: ...
    def identity_card_number(self) -> str: ...
    @staticmethod
    def pesel_compute_check_digit(pesel: str) -> int: ...
    def pesel(self, date_of_birth: Optional[datetime] = None, sex: Optional[str] = None) -> str: ...
    @staticmethod
    def pwz_doctor_compute_check_digit(x: Sequence[int]) -> int: ...
    def pwz_doctor(self) -> str: ...
    def pwz_nurse(self, kind: str = 'nurse') -> str: ...
    tax_office_codes: Tuple[str, ...]
    def nip(self) -> str: ...
