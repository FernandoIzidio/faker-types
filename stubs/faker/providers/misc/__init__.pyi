import json
import uuid
from .. import BaseProvider as BaseProvider
from ..python import TypesSpec as TypesSpec
from faker.exceptions import UnsupportedFeature as UnsupportedFeature
from typing import Any, Callable, List, Optional, Sequence, Tuple, Type, Union

localized: bool

class Provider(BaseProvider):
    def boolean(self, chance_of_getting_true: int = 50) -> bool: ...
    def null_boolean(self) -> Optional[bool]: ...
    def binary(self, length: int = ...) -> bytes: ...
    def md5(self, raw_output: bool = False) -> Union[bytes, str]: ...
    def sha1(self, raw_output: bool = False) -> Union[bytes, str]: ...
    def sha256(self, raw_output: bool = False) -> Union[bytes, str]: ...
    def uuid4(self, cast_to: Optional[Union[Callable[[uuid.UUID], str], Callable[[uuid.UUID], bytes]]] = ...) -> Union[bytes, str, uuid.UUID]: ...
    def password(self, length: int = 10, special_chars: bool = True, digits: bool = True, upper_case: bool = True, lower_case: bool = True) -> str: ...
    def zip(self, uncompressed_size: int = 65536, num_files: int = 1, min_file_size: int = 4096, compression: Optional[str] = None) -> bytes: ...
    def tar(self, uncompressed_size: int = 65536, num_files: int = 1, min_file_size: int = 4096, compression: Optional[str] = None) -> bytes: ...
    def image(self, size: Tuple[int, int] = (256, 256), image_format: str = 'png', hue: Optional[Union[int, Sequence[int], str]] = None, luminosity: Optional[str] = None) -> bytes: ...
    def dsv(self, dialect: str = 'faker-csv', header: Optional[Sequence[str]] = None, data_columns: Tuple[str, str] = ('{{name}}', '{{address}}'), num_rows: int = 10, include_row_ids: bool = False, **fmtparams: Any) -> str: ...
    def csv(self, header: Optional[Sequence[str]] = None, data_columns: Tuple[str, str] = ('{{name}}', '{{address}}'), num_rows: int = 10, include_row_ids: bool = False) -> str: ...
    def tsv(self, header: Optional[Sequence[str]] = None, data_columns: Tuple[str, str] = ('{{name}}', '{{address}}'), num_rows: int = 10, include_row_ids: bool = False) -> str: ...
    def psv(self, header: Optional[Sequence[str]] = None, data_columns: Tuple[str, str] = ('{{name}}', '{{address}}'), num_rows: int = 10, include_row_ids: bool = False) -> str: ...
    def json_bytes(self, data_columns: Optional[List] = None, num_rows: int = 10, indent: Optional[int] = None, cls: Optional[Type[json.JSONEncoder]] = None) -> bytes: ...
    def json(self, data_columns: Optional[List] = None, num_rows: int = 10, indent: Optional[int] = None, cls: Optional[Type[json.JSONEncoder]] = None) -> str: ...
    def xml(self, nb_elements: int = 10, variable_nb_elements: bool = True, value_types: Optional[TypesSpec] = None, allowed_types: Optional[TypesSpec] = None) -> str: ...
    def fixed_width(self, data_columns: Optional[list] = None, num_rows: int = 10, align: str = 'left') -> str: ...
