from .. import BaseProvider as BaseProvider, ElementsType as ElementsType
from typing import List, Optional, Tuple

localized: bool

class _IPv4Constants: ...

class Provider(BaseProvider):
    safe_domain_names: ElementsType[str]
    free_email_domains: ElementsType[str]
    tlds: ElementsType[str]
    hostname_prefixes: ElementsType[str]
    uri_pages: ElementsType[str]
    uri_paths: ElementsType[str]
    uri_extensions: ElementsType[str]
    http_methods: ElementsType[str]
    http_assigned_codes: ElementsType[int]
    user_name_formats: ElementsType[str]
    email_formats: ElementsType[str]
    url_formats: ElementsType[str]
    image_placeholder_services: ElementsType[str]
    replacements: Tuple[Tuple[str, str], ...]
    def email(self, safe: bool = True, domain: Optional[str] = None) -> str: ...
    def safe_domain_name(self) -> str: ...
    def safe_email(self) -> str: ...
    def free_email(self) -> str: ...
    def company_email(self) -> str: ...
    def free_email_domain(self) -> str: ...
    def ascii_email(self) -> str: ...
    def ascii_safe_email(self) -> str: ...
    def ascii_free_email(self) -> str: ...
    def ascii_company_email(self) -> str: ...
    def user_name(self) -> str: ...
    def hostname(self, levels: int = 1) -> str: ...
    def domain_name(self, levels: int = 1) -> str: ...
    def domain_word(self) -> str: ...
    def dga(self, year: Optional[int] = None, month: Optional[int] = None, day: Optional[int] = None, tld: Optional[str] = None, length: Optional[int] = None) -> str: ...
    def tld(self) -> str: ...
    def http_method(self) -> str: ...
    def http_status_code(self, include_unassigned: bool = True) -> int: ...
    def url(self, schemes: Optional[List[str]] = None) -> str: ...
    def ipv4_network_class(self) -> str: ...
    def ipv4(self, network: bool = False, address_class: Optional[str] = None, private: Optional[str] = None) -> str: ...
    def ipv4_private(self, network: bool = False, address_class: Optional[str] = None) -> str: ...
    def ipv4_public(self, network: bool = False, address_class: Optional[str] = None) -> str: ...
    def ipv6(self, network: bool = False) -> str: ...
    def mac_address(self, multicast: bool = False) -> str: ...
    def port_number(self, is_system: bool = False, is_user: bool = False, is_dynamic: bool = False) -> int: ...
    def uri_page(self) -> str: ...
    def uri_path(self, deep: Optional[int] = None) -> str: ...
    def uri_extension(self) -> str: ...
    def uri(self, schemes: Optional[List[str]] = None, deep: Optional[int] = None) -> str: ...
    def slug(self, value: Optional[str] = None) -> str: ...
    def image_url(self, width: Optional[int] = None, height: Optional[int] = None, placeholder_url: Optional[str] = None) -> str: ...
    def iana_id(self) -> str: ...
    def ripe_id(self) -> str: ...
    def nic_handle(self, suffix: str = 'FAKE') -> str: ...
    def nic_handles(self, count: int = 1, suffix: str = '????') -> List[str]: ...
