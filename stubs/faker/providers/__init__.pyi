from ..typing import OrderedDictType
from _typeshed import Incomplete
from typing import Any, Collection, List, Optional, Sequence, TypeVar, Union

T = TypeVar('T')
ElementsType = Union[Collection[str], Collection[T], OrderedDictType[T, float]]

class BaseProvider:
    __provider__: str
    __lang__: Optional[str]
    __use_weighting__: bool
    language_locale_codes: Incomplete
    generator: Incomplete
    def __init__(self, generator: Any) -> None: ...
    def locale(self) -> str: ...
    def language_code(self) -> str: ...
    def random_int(self, min: int = 0, max: int = 9999, step: int = 1) -> int: ...
    def random_digit(self) -> int: ...
    def random_digit_not_null(self) -> int: ...
    def random_digit_above_two(self) -> int: ...
    def random_digit_or_empty(self) -> Union[int, str]: ...
    def random_digit_not_null_or_empty(self) -> Union[int, str]: ...
    def random_number(self, digits: Optional[int] = None, fix_len: bool = False) -> int: ...
    def random_letter(self) -> str: ...
    def random_letters(self, length: int = 16) -> Sequence[str]: ...
    def random_lowercase_letter(self) -> str: ...
    def random_uppercase_letter(self) -> str: ...
    def random_elements(self, elements: ElementsType[T] = ('a', 'b', 'c'), length: Optional[int] = None, unique: bool = False, use_weighting: Optional[bool] = None) -> Sequence[T]: ...
    def random_choices(self, elements: ElementsType[T] = ('a', 'b', 'c'), length: Optional[int] = None) -> Sequence[T]: ...
    def random_element(self, elements: ElementsType[T] = ('a', 'b', 'c')) -> T: ...
    def random_sample(self, elements: ElementsType[T] = ('a', 'b', 'c'), length: Optional[int] = None) -> Sequence[T]: ...
    def randomize_nb_elements(self, number: int = 10, le: bool = False, ge: bool = False, min: Optional[int] = None, max: Optional[int] = None) -> int: ...
    def numerify(self, text: str = '###') -> str: ...
    def lexify(self, text: str = '????', letters: str = ...) -> str: ...
    def bothify(self, text: str = '## ??', letters: str = ...) -> str: ...
    def hexify(self, text: str = '^^^^', upper: bool = False) -> str: ...

class DynamicProvider(BaseProvider):
    provider_name: Incomplete
    elements: Incomplete
    def __init__(self, provider_name: str, elements: Optional[List] = None, generator: Optional[Any] = None) -> None: ...
    def add_element(self, element: str) -> None: ...
    def get_random_value(self, use_weighting: bool = True) -> Any: ...
