from ... import ElementsType as ElementsType
from ..es import Provider as AddressProvider
from _typeshed import Incomplete
from typing import Dict

class Provider(AddressProvider):
    regions: Dict[str, str]
    provinces: Dict[str, str]
    communes: Dict[str, str]
    street_prefixes: Incomplete
    street_suffixes: Incomplete
    city_formats: Incomplete
    street_name_formats: Incomplete
    building_number_formats: Incomplete
    street_address_formats: Incomplete
    address_formats: Incomplete
    secondary_address_formats: Incomplete
    common_street_names: Incomplete
    historic_people_street_names: Incomplete
    plant_street_names: ElementsType[str]
    road_names: Incomplete
    highway_names: Incomplete
    def commune(self) -> str: ...
    def province(self) -> str: ...
    def region(self) -> str: ...
    def commune_code(self) -> str: ...
    def province_code(self) -> str: ...
    def region_code(self) -> str: ...
    def common_street_name(self) -> str: ...
    def plant_street_name(self) -> str: ...
    def historic_people_street_name(self) -> str: ...
    def street_prefix(self) -> str: ...
    def secondary_address(self) -> str: ...
    def commune_and_region(self) -> str: ...
    def road_name(self) -> str: ...
    def highway_name(self) -> str: ...
    def postcode(self) -> str: ...
    administrative_unit = region
    city = commune
