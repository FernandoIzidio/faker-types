from .config import DEFAULT_LOCALE as DEFAULT_LOCALE
from .exceptions import UniquenessException as UniquenessException
from .factory import Factory as Factory
from .generator import Generator as Generator, random as random
from .typing import SeedType as SeedType
from .utils.distribution import choices_distribution as choices_distribution
from _typeshed import Incomplete
from random import Random
from typing import Any, Dict, List, Optional, Pattern, Sequence, Tuple, TypeVar, Union

RetType = TypeVar('RetType')

class Faker:
    cache_pattern: Pattern
    generator_attrs: list[str]
    def __init__(self, locale: Optional[Union[str, Sequence[str], Dict[str, Union[int, float]]]] = None, providers: Optional[List[str]] = None, generator: Optional[Generator] = None, includes: Optional[List[str]] = None, use_weighting: bool = True, **config: Any) -> None: ...
    def __dir__(self): ...
    def __getitem__(self, locale: str) -> Generator: ...
    def __getattribute__(self, attr: str) -> Any: ...
    def __getattr__(self, attr: str) -> Any: ...
    def __deepcopy__(self, memodict: Dict = {}) -> Faker: ...
    @property
    def unique(self) -> UniqueProxy: ...
    @property
    def optional(self) -> OptionalProxy: ...
    @classmethod
    def seed(cls, seed: Optional[SeedType] = None) -> None: ...
    def seed_instance(self, seed: Optional[SeedType] = None) -> None: ...
    def seed_locale(self, locale: str, seed: Optional[SeedType] = None) -> None: ...
    @property
    def random(self) -> Random: ...
    @random.setter
    def random(self, value: Random) -> None: ...
    @property
    def locales(self) -> List[str]: ...
    @property
    def weights(self) -> Optional[List[Union[int, float]]]: ...
    @property
    def factories(self) -> List[Generator]: ...
    def items(self) -> List[Tuple[str, Generator]]: ...

class UniqueProxy:
    def __init__(self, proxy: Faker) -> None: ...
    def clear(self) -> None: ...
    def __getattr__(self, name: str) -> Any: ...

class OptionalProxy:
    def __init__(self, proxy: Faker) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
