import random as random_module
from .providers import BaseProvider as BaseProvider
from .typing import SeedType as SeedType
from _typeshed import Incomplete
from typing import Any, Callable, Dict, List, Optional, Type, Union

random: random_module.Random
mod_random = random
Sentinel: object

class Generator:
    providers: List["BaseProvider"]
    def __init__(self, **config: Dict) -> None: ...
    def add_provider(self, provider: Union['BaseProvider', Type['BaseProvider']]) -> None: ...
    def provider(self, name: str) -> Optional['BaseProvider']: ...
    def get_providers(self) -> List['BaseProvider']: ...
    @property
    def random(self) -> random_module.Random: ...
    @random.setter
    def random(self, value: random_module.Random) -> None: ...
    def seed_instance(self, seed: Optional[SeedType] = None) -> Generator: ...
    @classmethod
    def seed(cls, seed: Optional[SeedType] = None) -> None: ...
    def format(self, formatter: str, *args: Any, **kwargs: Any) -> str: ...
    def get_formatter(self, formatter: str) -> Callable: ...
    def set_formatter(self, name: str, formatter: Callable) -> None: ...
    def set_arguments(self, group: str, argument: str, value: Optional[Any] = None) -> None: ...
    def get_arguments(self, group: str, argument: Optional[str] = None) -> Any: ...
    def del_arguments(self, group: str, argument: Optional[str] = None) -> Any: ...
    def parse(self, text: str) -> str: ...
